glm$ol$Number$Model$COL <- glm(data = autocar, formula = NC_COL ~ Qtr + Type + VehicleSize+DriverAge+DriverRisk+ offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
glm$ol$Number$Model$PI <- glm(data = autocar, formula = NC_PI ~ Qtr + Type + VehicleSize+DriverAge+DriverRisk+ offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
#show results
glm$ol
summary(glm$ol$Number$Model$BI)
#First, we create a new variable called average claim amount = Total Claim Amount / Number of Claims
autocar$AAC_BI <- autocar$AC_BI/autocar$NC_BI
autocar$AAC_PD <- autocar$AC_PD/autocar$NC_PD
autocar$AAC_COM <- autocar$AC_COM/autocar$NC_COM
autocar$AAC_COL <- autocar$AC_COL/autocar$NC_COL
autocar$AAC_PI <- autocar$AC_PI/autocar$NC_PI
#Model average amounts using gamma glm
glm$ol$Amount$Model$BI <- glm(data = autocar, formula = AAC_BI~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_BI)
glm$ol$Amount$Model$PD <- glm(data = autocar, formula = AAC_PD~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_PD)
glm$ol$Amount$Model$COM <- glm(data = autocar, formula = AAC_COM~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_COM)
glm$ol$Amount$Model$COL <- glm(data = autocar, formula = AAC_COL~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_COL)
glm$ol$Amount$Model$PI <- glm(data = autocar, formula = AAC_PI~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_PI)
summary(glm$ol$Amount$Model$PI)
# linear Regression
autocar$time <- autocar$Year + 2.5*as.numeric(autocar$Qtr)/10
autocar$time
melt.autocar <- melt(autocar[, names(autocar) %in% c("time", "AC_COM", "RiskClass", "Type", "NC_COM")] , id = c("Type", "RiskClass", "time"))
#ggplot(melt.autocar[melt.autocar$Type == "Commercial",]) + geom_line(aes(x = time, y = value, color = RiskClass))  + facet_wrap( ~ variable)
# linear regression for amount comprehensive and number comprehnsive
lm.no.outlier <- list()
autocar.tmp <- autocar[autocar$time != 2010.75,]
#View(autocar.tmp)
library(reshape2)
library(ggplot2)
# need to do so for each risk class and each type, Put it in a list and make it with a for loop
for(j in unique(as.character(autocar.tmp$Type))){
# we need to use unique because we only want to do the linear regression one
for(i in unique(as.character(autocar.tmp$RiskClass))){
lm.no.outlier$AC_COM[[j]][[i]] <- lm(AC_COM ~ Year+ factor(Qtr), data = autocar.tmp[autocar.tmp$Type == j & autocar.tmp$RiskClass == i, ])
lm.no.outlier$NC_COM[[j]][[i]] <- lm(NC_COM ~ Year+ factor(Qtr), data = autocar.tmp[autocar.tmp$Type == j & autocar.tmp$RiskClass == i, ])
}
}
# Then We predict and put into new data frame called ..
autocar.refined <- autocar
# defining our predict var
predict.val <- data.frame(Year = 2010, Qtr = 3)
for(j in unique(as.character(autocar.tmp$Type))){
# we need to use unique because we only want to do the linear regression one
for(i in unique(as.character(autocar.tmp$RiskClass))){
# PREDICT FOR AC_COM
autocar.refined$AC_COM[autocar.refined$Type == j & autocar$RiskClass == i & autocar.refined$Year == 2010 & autocar.refined$Qtr ==3] <-
predict.lm(lm.no.outlier$AC_COM[[j]][[i]], predict.val)
# Predict for NC_com and we round up to get integer
autocar.refined$NC_COM[autocar.refined$Type == j & autocar$RiskClass == i & autocar.refined$Year == 2010 & autocar.refined$Qtr ==3] <-
ceiling(predict.lm(lm.no.outlier$NC_COM[[j]][[i]], predict.val))
}
}
# Compare
melt.autocar.refined <- melt(autocar.refined[, names(autocar.refined) %in% c("time", "AC_COM", "RiskClass", "Type", "NC_COM")] , id = c("Type", "RiskClass", "time"))
# Figure For Personal types
p1 <- ggplot(melt.autocar[melt.autocar$Type == "Personal",]) + geom_line(aes(x = time, y = value, color = RiskClass)) +
geom_vline(xintercept = 2010.75) + facet_wrap( ~ variable, scales = "free") + ggtitle("Personal raw data")
p2 <- ggplot(melt.autocar.refined[melt.autocar.refined$Type == "Personal",]) + geom_line(aes(x = time, y = value, color = RiskClass)) +
geom_vline(xintercept = 2010.75) + facet_wrap( ~ variable, scales = "free") + ggtitle("Personal refined data")
# Figure for Commercial types
p3 <- ggplot(melt.autocar[melt.autocar$Type == "Commercial",]) + geom_line(aes(x = time, y = value, color = RiskClass)) +
geom_vline(xintercept = 2010.75) + facet_wrap( ~ variable, scales = "free") + ggtitle("Commercial raw data")
p4 <- ggplot(melt.autocar.refined[melt.autocar.refined$Type == "Commercial",]) + geom_line(aes(x = time, y = value, color = RiskClass)) +
geom_vline(xintercept = 2010.75) + facet_wrap( ~ variable, scales = "free") + ggtitle("Commercial refined data")
# borrowed this function
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# multiplot(p1,p2, plotlist = NULL, cols = 1)
# multiplot(p3,p4, plotlist = NULL, cols = 1)
#Perform GLM's for refined data (after adjusting the outlier)
#Model number of claims in every claim category
glm$rd$Number$Model$BI <- glm(data = autocar.refined, formula = NC_BI ~ Qtr + Type + VehicleSize + DriverAge + DriverRisk + offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
glm$rd$Number$Model$PD <- glm(data = autocar.refined, formula = NC_PD ~ Qtr + Type + VehicleSize+DriverAge+DriverRisk+ offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
glm$rd$Number$Model$COM <- glm(data = autocar.refined, formula = NC_COM ~ Qtr + Type + VehicleSize+DriverAge+DriverRisk+ offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
glm$rd$Number$Model$COL <- glm(data = autocar.refined, formula = NC_COL ~ Qtr + Type + VehicleSize+DriverAge+DriverRisk+ offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
glm$rd$Number$Model$PI <- glm(data = autocar.refined, formula = NC_PI ~ Qtr + Type + VehicleSize+DriverAge+DriverRisk+ offset(log(Exposure)), family = quasi(variance="mu", link = "log"))
#show results
glm$rd
summary(glm$ol$Number$Model$BI)
#Model average amounts using gamma glm (for refined data)
glm$rd$Amount$Model$BI <- glm(data = autocar.refined, formula = AAC_BI~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_BI)
glm$rd$Amount$Model$PD <- glm(data = autocar.refined, formula = AAC_PD~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_PD)
glm$rd$Amount$Model$COM <- glm(data = autocar.refined, formula = AAC_COM~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_COM)
glm$rd$Amount$Model$COL <- glm(data = autocar.refined, formula = AAC_COL~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_COL)
glm$rd$Amount$Model$PI <- glm(data = autocar.refined, formula = AAC_PI~Qtr+Type+VehicleSize+DriverAge+DriverRisk, family = quasi(variance="mu^2", link = "log"), weights = NC_PI)
summary(glm$rd$Amount$Model$PI)
# Next we need to get our estimates
library(dplyr) # library that contains data frames to join data frames
# Declare help functions
# CHeck if a numeric is empty or not
isEmpty <- function(x) {
return(identical(x, numeric(0)))
}
calcEstimates <- function(df.main, model){
# df.main data frame with our information
# model, list of number or amount models
# appends corresponding estimates to the df.main
df.main$estimate <- 0
for(i in 1:dim(df.main)[1]){
# Just to get shorter name
tmp.coverage <- as.character(df.main$coverage[i])
tmp <- as.data.frame(model[[tmp.coverage]]$coefficient)
names(tmp) <- c("coef")
# intercept is always the same
beta_intercept <-  tmp$coef[rownames(tmp) == "(Intercept)"]
# Qtr
tmp.qtr <- as.numeric(df.main$Qtr[i])
tmp.qtr <- paste("Qtr",tmp.qtr, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.qtr])){
# is empty
beta_qtr <- 0
}else{
# not empy
beta_qtr <- tmp$coef[rownames(tmp) == tmp.qtr]
}
# Type
tmp.type <- as.character(df.main$Type[i])
tmp.type <- paste("Type",tmp.type, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.type])){
# is empty
beta_type <- 0
}else{
# not empy
beta_type <- tmp$coef[rownames(tmp) == tmp.type]
}
# VehicleSize
# First letter
tmp.size <- toupper(substr(df.main$RiskClass[i],1,1))
tmp.size <- paste("VehicleSize",tmp.size, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.size])){
# is empty
beta_size <- 0
}else{
# not empy
beta_size <- tmp$coef[rownames(tmp) == tmp.size]
}
# VehicleAge
# second letter
tmp.age <- toupper(substr(df.main$RiskClass[i],2,2))
tmp.age <- paste("VehicleRisk",tmp.age, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.age])){
# is empty
beta_age <- 0
}else{
# not empy
beta_age <- tmp$coef[rownames(tmp) == tmp.age]
}
# VehicleRisk
# third letter
tmp.risk <- toupper(substr(df.main$RiskClass[i],3,3))
tmp.risk <- paste("VehicleRisk",tmp.risk, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.risk])){
# is empty
beta_risk <- 0
}else{
# not empy
beta_risk <- tmp$coef[rownames(tmp) == tmp.risk]
}
# Finnaly we insert our esitmate
df.main$estimate[i] <- exp(beta_intercept + beta_qtr + beta_type + beta_size + beta_age + beta_risk)
}
return(df.main)
}
GetEstimates <- function(Data.List, m){
# Data.list for example gld$rd
# m, "Number" or "Amount"
# get namse of  coverage (policies)
df.1 <- data.frame(coverage = names(Data.List[[m]]$Model))
# Type
df.2 <- data.frame(Type = unique(autocar$Type))
# Risk Classes
df.3 <- data.frame(RiskClass = unique(autocar$RiskClass))
# quarters
df.4 <- data.frame(Qtr = c(1,2,3,4))
df.main <- merge(df.1, df.2)
df.main <- merge(df, df.3)
df.main <- merge(df, df.4)
df.main <- as.data.frame(df)
# should be 1080 rows....1080 estimates wooppyy
df.main <- calcEstimates(df.main = df.main, model = Data.List[[m]]$Model)
# change the Names
if(m == "Number"){
names(df.main)[names(df.main) == "estimate"] <- "NPerExposure"
}else{
names(df.main)[names(df.main) == "estimate"] <- "AAC"
}
return(df.main)
}
# Create functions that Can Will ltake different growth rates and list to speculate about the future
Data.List <- glm$rd
# get namse of  coverage (policies)
df.1 <- data.frame(coverage = names(Data.List[[m]]$Model))
m = "Number"
# get namse of  coverage (policies)
df.1 <- data.frame(coverage = names(Data.List[[m]]$Model))
df.1
df.2 <- data.frame(Type = unique(autocar$Type))
df.2
# Risk Classes
df.3 <- data.frame(RiskClass = unique(autocar$RiskClass))
df.main
df.1 <- data.frame(coverage = names(Data.List[[m]]$Model))
# Type
df.2 <- data.frame(Type = unique(autocar$Type))
# Risk Classes
df.3 <- data.frame(RiskClass = unique(autocar$RiskClass))
d# quarters
df.4 <- data.frame(Qtr = c(1,2,3,4))
?merge
merge(df.1, df.2)
df.main <- merge(df.1, df.2)
df.main <- merge(df.main, df.3)
df.main <- merge(df.main, df.4)
df.main <- as.data.frame(df.main)
df.main <- calcEstimates(df.main = df.main, model = Data.List[[m]]$Model)
df,main
df.main
calcEstimates <- function(df.main, model){
# df.main data frame with our information
# model, list of number or amount models
# appends corresponding estimates to the df.main
df.main$estimate <- 0
for(i in 1:dim(df.main)[1]){
# Just to get shorter name
tmp.coverage <- as.character(df.main$coverage[i])
tmp <- as.data.frame(model[[tmp.coverage]]$coefficient)
names(tmp) <- c("coef")
# intercept is always the same
beta_intercept <-  tmp$coef[rownames(tmp) == "(Intercept)"]
# Qtr
tmp.qtr <- as.numeric(df.main$Qtr[i])
tmp.qtr <- paste("Qtr",tmp.qtr, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.qtr])){
# is empty
beta_qtr <- 0
}else{
# not empy
beta_qtr <- tmp$coef[rownames(tmp) == tmp.qtr]
}
# Type
tmp.type <- as.character(df.main$Type[i])
tmp.type <- paste("Type",tmp.type, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.type])){
# is empty
beta_type <- 0
}else{
# not empy
beta_type <- tmp$coef[rownames(tmp) == tmp.type]
}
# VehicleSize
# First letter
tmp.size <- toupper(substr(df.main$RiskClass[i],1,1))
tmp.size <- paste("VehicleSize",tmp.size, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.size])){
# is empty
beta_size <- 0
}else{
# not empy
beta_size <- tmp$coef[rownames(tmp) == tmp.size]
}
# VehicleAge
# second letter
tmp.age <- toupper(substr(df.main$RiskClass[i],2,2))
tmp.age <- paste("VehicleRisk",tmp.age, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.age])){
# is empty
beta_age <- 0
}else{
# not empy
beta_age <- tmp$coef[rownames(tmp) == tmp.age]
}
# VehicleRisk
# third letter
tmp.risk <- toupper(substr(df.main$RiskClass[i],3,3))
tmp.risk <- paste("VehicleRisk",tmp.risk, sep ="")
if(isEmpty(tmp$coef[rownames(tmp) == tmp.risk])){
# is empty
beta_risk <- 0
}else{
# not empy
beta_risk <- tmp$coef[rownames(tmp) == tmp.risk]
}
# Finnaly we insert our esitmate
df.main$estimate[i] <- exp(beta_intercept + beta_qtr + beta_type + beta_size + beta_age + beta_risk)
}
return(df.main)
}
GetEstimates <- function(Data.List, m){
# Data.list for example gld$rd
# m, "Number" or "Amount"
# get namse of  coverage (policies)
df.1 <- data.frame(coverage = names(Data.List[[m]]$Model))
# Type
df.2 <- data.frame(Type = unique(autocar$Type))
# Risk Classes
df.3 <- data.frame(RiskClass = unique(autocar$RiskClass))
d# quarters
df.4 <- data.frame(Qtr = c(1,2,3,4))
df.main <- merge(df.1, df.2)
df.main <- merge(df.main, df.3)
df.main <- merge(df.main, df.4)
df.main <- as.data.frame(df.main)
# should be 1080 rows....1080 estimates wooppyy
df.main <- calcEstimates(df.main = df.main, model = Data.List[[m]]$Model)
# change the Names
if(m == "Number"){
names(df.main)[names(df.main) == "estimate"] <- "NPerExposure"
}else{
names(df.main)[names(df.main) == "estimate"] <- "AAC"
}
return(df.main)
}
# get estimates
Data.List$Number$df <- GetEstimates(Data.List = Data.List, m = "Number")
GetEstimates <- function(Data.List, m){
# Data.list for example gld$rd
# m, "Number" or "Amount"
# get namse of  coverage (policies)
df.1 <- data.frame(coverage = names(Data.List[[m]]$Model))
# Type
df.2 <- data.frame(Type = unique(autocar$Type))
# Risk Classes
df.3 <- data.frame(RiskClass = unique(autocar$RiskClass))
# quarters
df.4 <- data.frame(Qtr = c(1,2,3,4))
df.main <- merge(df.1, df.2)
df.main <- merge(df.main, df.3)
df.main <- merge(df.main, df.4)
df.main <- as.data.frame(df.main)
# should be 1080 rows....1080 estimates wooppyy
df.main <- calcEstimates(df.main = df.main, model = Data.List[[m]]$Model)
# change the Names
if(m == "Number"){
names(df.main)[names(df.main) == "estimate"] <- "NPerExposure"
}else{
names(df.main)[names(df.main) == "estimate"] <- "AAC"
}
return(df.main)
}
# get estimates
Data.List$Number$df <- GetEstimates(Data.List = Data.List, m = "Number")
Data.List$Amount$df <- GetEstimates(Data.List = Data.List, m = "Amount")
df.number <- Data.List$Number$df
df.amount <- Data.List$Amount$df
start.year <- max(as.numeric(df$Year))
start.year <- max(as.numeric(df.main$Year))
df.main <- autocar
start.year <- max(as.numeric(df.main$Year))
i = 1
j = 1
View(df.number)
unique(df.main$Year)
df.number <- Data.List$Number$df
df.amount <- Data.List$Amount$df
start.year <- max(as.numeric(df.main$Year))
# Create tmp data.frame. This tmp df will be added to the prediction data frame once every missing value has been filled
tmp <- df.main[1,]
tmp$Year <- start.year + time.frame[i]
time.frame = 1
tmp$Year <- start.year + time.frame[i]
tmp$Qtr <- df.number$Qtr[j]
tmp$RiskClass <- as.character(df.number$RiskClass[j])
tmp$Type <- as.character(df.number$Type[j])
# Here is where the fun part comes/ this is something we really don't know about
bool <- df.main$Year == start.year & df.main$Qtr == tmp$Qtr & df.main$RiskClass == tmp$RiskClass & df.main$Type == tmp$Type
# Create tmp data.frame. This tmp df will be added to the prediction data frame once every missing value has been filled
tmp <- df.main[1,]
tmp$Year <- start.year + time.frame[i]
tmp$Qtr <- df.number$Qtr[j]
tmp$RiskClass <- as.character(df.number$RiskClass[j])
tmp$Type <- as.character(df.number$Type[j])
# Here is where the fun part comes/ this is something we really don't know about
bool <- df.main$Year == start.year & df.main$Qtr == tmp$Qtr & df.main$RiskClass == tmp$RiskClass & df.main$Type == tmp$Type
tmp$Exposure <- growth(exposure = df.main$Exposure[bool])
growth <- function(t = 1, exposure){
# growth rate is dependent on time
return(exposure)
}
time.frame <- 1:10
# Here is where the fun part comes/ this is something we really don't know about
bool <- df.main$Year == start.year & df.main$Qtr == tmp$Qtr & df.main$RiskClass == tmp$RiskClass & df.main$Type == tmp$Type
tmp$Exposure <- growth(exposure = df.main$Exposure[bool])
# add numbers
# We need to get right row
bool <- df.number$Type == tmp$Type & df.number$RiskClass == tmp$RiskClass & df.number$Qtr == tmp$Qtr
tmp$NC_BI <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "BI" & bool]
tmp$NC_PD <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "PD" & bool]
tmp$NC_COM <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "COM" & bool]
tmp$NC_COL <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "COL" & bool]
tmp$NC_PI <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "PI" & bool]
# and for the amount
bool <- df.amount$Type == tmp$Type & df.amount$RiskClass == tmp$RiskClass & df.amount$Qtr == tmp$Qtr
tmp$AC_BI <- df.amount$AAC[df.amount$coverage == "BI" & bool]*tmp$NC_BI
tmp$AC_PD <- df.amount$AAC[df.amount$coverage == "PD" & bool]*tmp$NC_PD
tmp$AC_COM <- df.amount$AAC[df.amount$coverage == "COM" & bool]*tmp$NC_COM
tmp$AC_COL <- df.amount$AAC[df.amount$coverage == "COL" & bool]*tmp$NC_COL
tmp$AC_PI <- df.amount$AAC[df.amount$coverage == "PI" & bool]*tmp$NC_PI
for(j in 1:dim(df.number)[1]){
# Create tmp data.frame. This tmp df will be added to the prediction data frame once every missing value has been filled
tmp <- df.main[1,]
tmp$Year <- start.year + time.frame[i]
tmp$Qtr <- df.number$Qtr[j]
tmp$RiskClass <- as.character(df.number$RiskClass[j])
tmp$Type <- as.character(df.number$Type[j])
# Here is where the fun part comes/ this is something we really don't know about
bool <- df.main$Year == start.year & df.main$Qtr == tmp$Qtr & df.main$RiskClass == tmp$RiskClass & df.main$Type == tmp$Type
tmp$Exposure <- growth(exposure = df.main$Exposure[bool])
# add numbers
# We need to get right row
bool <- df.number$Type == tmp$Type & df.number$RiskClass == tmp$RiskClass & df.number$Qtr == tmp$Qtr
tmp$NC_BI <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "BI" & bool]
tmp$NC_PD <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "PD" & bool]
tmp$NC_COM <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "COM" & bool]
tmp$NC_COL <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "COL" & bool]
tmp$NC_PI <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "PI" & bool]
# and for the amount
bool <- df.amount$Type == tmp$Type & df.amount$RiskClass == tmp$RiskClass & df.amount$Qtr == tmp$Qtr
tmp$AC_BI <- df.amount$AAC[df.amount$coverage == "BI" & bool]*tmp$NC_BI
tmp$AC_PD <- df.amount$AAC[df.amount$coverage == "PD" & bool]*tmp$NC_PD
tmp$AC_COM <- df.amount$AAC[df.amount$coverage == "COM" & bool]*tmp$NC_COM
tmp$AC_COL <- df.amount$AAC[df.amount$coverage == "COL" & bool]*tmp$NC_COL
tmp$AC_PI <- df.amount$AAC[df.amount$coverage == "PI" & bool]*tmp$NC_PI
# Finnaly append it to the data frame
df.main <- rbind(df.main, tmp)
}
df.main$Exposure[df.main$RiskClass == "SML" & df.main$Type == "Personal"]
warnings()
time.frame
df.main[df.main$RiskClass == "SML" & df.main$Type == "Personal", names(df.main) %in% c("Exposure", "Year")]
View(df.main[df.main$RiskClass == "SML" & df.main$Type == "Personal", names(df.main) %in% c("Exposure", "Year")])
df.number
# this data frame includes what we want to loo
loop.data.frame <- merge(df.number$Type, df.number$RiskClass)
loop.data.frame <- merge(loop.data.frame, df.number$Qtr)
loop.data.frame <- as.data.frame(loop.data.frame)
warnings()
loop.data.frame
merge(df.number$Type, df.number$RiskClass)
# this data frame includes what we want to loo
loop.data.frame <- merge(unique(df.number$Type), unique(df.number$RiskClass))
# this data frame includes what we want to loo
loop.data.frame <- merge(unique(df.number$Type), unique(df.number$RiskClass))
loop.data.frame <- merge(loop.data.frame, unique(df.number$Qtr))
loop.data.frame <- as.data.frame(loop.data.frame)
loop.data.frame
merge(unique(df.number$Type), unique(df.number$RiskClass))
merge(loop.data.frame, unique(df.number$Qtr))
df.number$Qtr
unique(df.number$Qtr)
loop.df <- merge(df.1,df.2)
warnings()
loop.df <- merge(df.1,df.2)
loop.df <- merge(loop.df, df.3)
loop.df <- as.data.frame(loop.df)
loop.df
# There was one error the df.dataframe loops over each coverage but that is unnecessay and wrong
# because we deal with the coverage inside the for loop. We only want to do this for each type, RiskClass and Qtr
for(j in 1:dim(loop.df)[1]){
# Create tmp data.frame. This tmp df will be added to the prediction data frame once every missing value has been filled
tmp <- df.main[1,]
tmp$Year <- start.year + time.frame[i]
tmp$Qtr <- df.number$Qtr[j]
tmp$RiskClass <- as.character(df.number$RiskClass[j])
tmp$Type <- as.character(df.number$Type[j])
# Here is where the fun part comes/ this is something we really don't know about
bool <- df.main$Year == start.year & df.main$Qtr == tmp$Qtr & df.main$RiskClass == tmp$RiskClass & df.main$Type == tmp$Type
tmp$Exposure <- growth(exposure = df.main$Exposure[bool])
# add numbers
# We need to get right row
bool <- df.number$Type == tmp$Type & df.number$RiskClass == tmp$RiskClass & df.number$Qtr == tmp$Qtr
tmp$NC_BI <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "BI" & bool]
tmp$NC_PD <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "PD" & bool]
tmp$NC_COM <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "COM" & bool]
tmp$NC_COL <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "COL" & bool]
tmp$NC_PI <- tmp$Exposure*df.number$NPerExposure[df.number$coverage == "PI" & bool]
# and for the amount
bool <- df.amount$Type == tmp$Type & df.amount$RiskClass == tmp$RiskClass & df.amount$Qtr == tmp$Qtr
tmp$AC_BI <- df.amount$AAC[df.amount$coverage == "BI" & bool]*tmp$NC_BI
tmp$AC_PD <- df.amount$AAC[df.amount$coverage == "PD" & bool]*tmp$NC_PD
tmp$AC_COM <- df.amount$AAC[df.amount$coverage == "COM" & bool]*tmp$NC_COM
tmp$AC_COL <- df.amount$AAC[df.amount$coverage == "COL" & bool]*tmp$NC_COL
tmp$AC_PI <- df.amount$AAC[df.amount$coverage == "PI" & bool]*tmp$NC_PI
# Finnaly append it to the data frame
df.main <- rbind(df.main, tmp)
View(df.main[df.main$RiskClass == "SML" & df.main$Type == "Personal", names(df.main) %in% c("Exposure", "Year")])
}
